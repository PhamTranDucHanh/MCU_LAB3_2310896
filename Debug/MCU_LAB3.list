
MCU_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c1c  08002c1c  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002c1c  08002c1c  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c1c  08002c1c  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000054  08002c78  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002c78  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009675  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c68  00000000  00000000  000296f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd4  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be4f  00000000  00000000  0004356c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082726  00000000  00000000  0004f3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a10  00000000  00000000  000d1b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b98 	.word	0x08002b98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002b98 	.word	0x08002b98

0800014c <buttonsInitO>:
struct ButtonStruct ButtonArray[NO_OF_BUTTONS];
GPIO_PinState validPress[NO_OF_BUTTONS];
GPIO_PinState filterPress1[NO_OF_BUTTONS];
GPIO_PinState filterPress2[NO_OF_BUTTONS];

void buttonsInitO(GPIO_TypeDef *PORT, uint16_t PIN){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	static int count = 0;
	if (count >= NO_OF_BUTTONS) return;
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <buttonsInitO+0x6c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b02      	cmp	r3, #2
 800015e:	dc26      	bgt.n	80001ae <buttonsInitO+0x62>
	ButtonArray[count].PORT = PORT;
 8000160:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <buttonsInitO+0x6c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4915      	ldr	r1, [pc, #84]	; (80001bc <buttonsInitO+0x70>)
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	ButtonArray[count].PIN = PIN;
 800016c:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <buttonsInitO+0x6c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4a12      	ldr	r2, [pc, #72]	; (80001bc <buttonsInitO+0x70>)
 8000172:	00db      	lsls	r3, r3, #3
 8000174:	4413      	add	r3, r2
 8000176:	887a      	ldrh	r2, [r7, #2]
 8000178:	809a      	strh	r2, [r3, #4]
	currentState[count] = INIT;
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <buttonsInitO+0x6c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4a10      	ldr	r2, [pc, #64]	; (80001c0 <buttonsInitO+0x74>)
 8000180:	2100      	movs	r1, #0
 8000182:	54d1      	strb	r1, [r2, r3]
	validPress[count] = Release;
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <buttonsInitO+0x6c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <buttonsInitO+0x78>)
 800018a:	2101      	movs	r1, #1
 800018c:	54d1      	strb	r1, [r2, r3]
	filterPress1[count] = Release;
 800018e:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <buttonsInitO+0x6c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <buttonsInitO+0x7c>)
 8000194:	2101      	movs	r1, #1
 8000196:	54d1      	strb	r1, [r2, r3]
	filterPress2[count] = Release;
 8000198:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <buttonsInitO+0x6c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0b      	ldr	r2, [pc, #44]	; (80001cc <buttonsInitO+0x80>)
 800019e:	2101      	movs	r1, #1
 80001a0:	54d1      	strb	r1, [r2, r3]
	count++;
 80001a2:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <buttonsInitO+0x6c>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	3301      	adds	r3, #1
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <buttonsInitO+0x6c>)
 80001aa:	6013      	str	r3, [r2, #0]
 80001ac:	e000      	b.n	80001b0 <buttonsInitO+0x64>
	if (count >= NO_OF_BUTTONS) return;
 80001ae:	bf00      	nop
}
 80001b0:	370c      	adds	r7, #12
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	20000070 	.word	0x20000070
 80001bc:	20000084 	.word	0x20000084
 80001c0:	20000080 	.word	0x20000080
 80001c4:	2000009c 	.word	0x2000009c
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	200000a0 	.word	0x200000a0

080001d0 <verifyStateO>:

int verifyStateO(int i){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	if (timerFlag(debounce_timer[i])){
 80001d8:	4a32      	ldr	r2, [pc, #200]	; (80002a4 <verifyStateO+0xd4>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 f8f9 	bl	80013d8 <timerFlag>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d02d      	beq.n	8000248 <verifyStateO+0x78>
		timerSet(debounce_timer[i], DEBOUNCE_DUR);
 80001ec:	4a2d      	ldr	r2, [pc, #180]	; (80002a4 <verifyStateO+0xd4>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f4:	210a      	movs	r1, #10
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 f89e 	bl	8001338 <timerSet>
		validPress[i] = filterPress1[i];
 80001fc:	4a2a      	ldr	r2, [pc, #168]	; (80002a8 <verifyStateO+0xd8>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4413      	add	r3, r2
 8000202:	7819      	ldrb	r1, [r3, #0]
 8000204:	4a29      	ldr	r2, [pc, #164]	; (80002ac <verifyStateO+0xdc>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	460a      	mov	r2, r1
 800020c:	701a      	strb	r2, [r3, #0]
		filterPress1[i] = filterPress2[i];
 800020e:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <verifyStateO+0xe0>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	7819      	ldrb	r1, [r3, #0]
 8000216:	4a24      	ldr	r2, [pc, #144]	; (80002a8 <verifyStateO+0xd8>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	460a      	mov	r2, r1
 800021e:	701a      	strb	r2, [r3, #0]
		filterPress2[i] = HAL_GPIO_ReadPin(ButtonArray[i].PORT, ButtonArray[i].PIN);
 8000220:	4a24      	ldr	r2, [pc, #144]	; (80002b4 <verifyStateO+0xe4>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000228:	4922      	ldr	r1, [pc, #136]	; (80002b4 <verifyStateO+0xe4>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	00db      	lsls	r3, r3, #3
 800022e:	440b      	add	r3, r1
 8000230:	889b      	ldrh	r3, [r3, #4]
 8000232:	4619      	mov	r1, r3
 8000234:	4610      	mov	r0, r2
 8000236:	f001 fc83 	bl	8001b40 <HAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	4619      	mov	r1, r3
 800023e:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <verifyStateO+0xe0>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4413      	add	r3, r2
 8000244:	460a      	mov	r2, r1
 8000246:	701a      	strb	r2, [r3, #0]
	}
	if (validPress[i] == Press && filterPress1[i] == Press && filterPress2[i] == Press){
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <verifyStateO+0xdc>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4413      	add	r3, r2
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d10d      	bne.n	8000270 <verifyStateO+0xa0>
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <verifyStateO+0xd8>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4413      	add	r3, r2
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d107      	bne.n	8000270 <verifyStateO+0xa0>
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <verifyStateO+0xe0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d101      	bne.n	8000270 <verifyStateO+0xa0>
		return Press;
 800026c:	2300      	movs	r3, #0
 800026e:	e014      	b.n	800029a <verifyStateO+0xca>
	}
	else if (validPress[i] == Release && filterPress1[i] == Release && filterPress2[i] == Release){
 8000270:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <verifyStateO+0xdc>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4413      	add	r3, r2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d10d      	bne.n	8000298 <verifyStateO+0xc8>
 800027c:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <verifyStateO+0xd8>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d107      	bne.n	8000298 <verifyStateO+0xc8>
 8000288:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <verifyStateO+0xe0>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4413      	add	r3, r2
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d101      	bne.n	8000298 <verifyStateO+0xc8>
		return Release;
 8000294:	2301      	movs	r3, #1
 8000296:	e000      	b.n	800029a <verifyStateO+0xca>
	}
	return 2;
 8000298:	2302      	movs	r3, #2
}
 800029a:	4618      	mov	r0, r3
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000000 	.word	0x20000000
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	2000009c 	.word	0x2000009c
 80002b0:	200000a0 	.word	0x200000a0
 80002b4:	20000084 	.word	0x20000084

080002b8 <buttonsFSMO1>:

void buttonsFSMO1(int i){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
		switch(currentState[i]){
 80002c0:	4a45      	ldr	r2, [pc, #276]	; (80003d8 <buttonsFSMO1+0x120>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b05      	cmp	r3, #5
 80002ca:	d87a      	bhi.n	80003c2 <buttonsFSMO1+0x10a>
 80002cc:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <buttonsFSMO1+0x1c>)
 80002ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d2:	bf00      	nop
 80002d4:	080002ed 	.word	0x080002ed
 80002d8:	08000301 	.word	0x08000301
 80002dc:	08000319 	.word	0x08000319
 80002e0:	0800032f 	.word	0x0800032f
 80002e4:	08000373 	.word	0x08000373
 80002e8:	0800037f 	.word	0x0800037f
			case INIT:
				timerSet(DEBOUNCE1_TIMER, DEBOUNCE_DUR);
 80002ec:	210a      	movs	r1, #10
 80002ee:	2000      	movs	r0, #0
 80002f0:	f001 f822 	bl	8001338 <timerSet>

				currentState[i] = RELEASE;
 80002f4:	4a38      	ldr	r2, [pc, #224]	; (80003d8 <buttonsFSMO1+0x120>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
				break;
 80002fe:	e067      	b.n	80003d0 <buttonsFSMO1+0x118>
			case RELEASE:

				if (verifyStateO(i) == Press){
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f7ff ff65 	bl	80001d0 <verifyStateO>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d15c      	bne.n	80003c6 <buttonsFSMO1+0x10e>
					currentState[i] = PRESS;
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <buttonsFSMO1+0x120>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	2202      	movs	r2, #2
 8000314:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000316:	e056      	b.n	80003c6 <buttonsFSMO1+0x10e>
			case PRESS:
				timerSet(HOLD1_TIMER, HOLD_DUR);
 8000318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800031c:	2003      	movs	r0, #3
 800031e:	f001 f80b 	bl	8001338 <timerSet>

				currentState[i] = PREHOLD;
 8000322:	4a2d      	ldr	r2, [pc, #180]	; (80003d8 <buttonsFSMO1+0x120>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	2203      	movs	r2, #3
 800032a:	701a      	strb	r2, [r3, #0]
				break;
 800032c:	e050      	b.n	80003d0 <buttonsFSMO1+0x118>
			case PREHOLD:

				if (verifyStateO(i) == Release){
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ff4e 	bl	80001d0 <verifyStateO>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d104      	bne.n	8000344 <buttonsFSMO1+0x8c>
					currentState[i] = RELEASE;
 800033a:	4a27      	ldr	r2, [pc, #156]	; (80003d8 <buttonsFSMO1+0x120>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4413      	add	r3, r2
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]
				}
				if (timerFlag(HOLD1_TIMER) && verifyStateO(i) == Press){
 8000344:	2003      	movs	r0, #3
 8000346:	f001 f847 	bl	80013d8 <timerFlag>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d03c      	beq.n	80003ca <buttonsFSMO1+0x112>
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff3d 	bl	80001d0 <verifyStateO>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d136      	bne.n	80003ca <buttonsFSMO1+0x112>
					timerSet(HOLD1_TIMER, HOLD_DUR);
 800035c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000360:	2003      	movs	r0, #3
 8000362:	f000 ffe9 	bl	8001338 <timerSet>
					currentState[i] = HOLD;
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <buttonsFSMO1+0x120>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4413      	add	r3, r2
 800036c:	2204      	movs	r2, #4
 800036e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000370:	e02b      	b.n	80003ca <buttonsFSMO1+0x112>
			case HOLD:

				currentState[i] = POSTHOLD;
 8000372:	4a19      	ldr	r2, [pc, #100]	; (80003d8 <buttonsFSMO1+0x120>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4413      	add	r3, r2
 8000378:	2205      	movs	r2, #5
 800037a:	701a      	strb	r2, [r3, #0]
				break;
 800037c:	e028      	b.n	80003d0 <buttonsFSMO1+0x118>
			case POSTHOLD:

				if (verifyStateO(i) == Release){
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff26 	bl	80001d0 <verifyStateO>
 8000384:	4603      	mov	r3, r0
 8000386:	2b01      	cmp	r3, #1
 8000388:	d104      	bne.n	8000394 <buttonsFSMO1+0xdc>
					currentState[i] = RELEASE;
 800038a:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <buttonsFSMO1+0x120>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4413      	add	r3, r2
 8000390:	2201      	movs	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
				}
				if (timerFlag(HOLD1_TIMER) && verifyStateO(i) == Press){
 8000394:	2003      	movs	r0, #3
 8000396:	f001 f81f 	bl	80013d8 <timerFlag>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d016      	beq.n	80003ce <buttonsFSMO1+0x116>
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff ff15 	bl	80001d0 <verifyStateO>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d110      	bne.n	80003ce <buttonsFSMO1+0x116>
					timerSet(HOLD1_TIMER, HOLD_DUR);
 80003ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003b0:	2003      	movs	r0, #3
 80003b2:	f000 ffc1 	bl	8001338 <timerSet>
					currentState[i] = HOLD;
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <buttonsFSMO1+0x120>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	2204      	movs	r2, #4
 80003be:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003c0:	e005      	b.n	80003ce <buttonsFSMO1+0x116>
			default:
				break;
 80003c2:	bf00      	nop
 80003c4:	e004      	b.n	80003d0 <buttonsFSMO1+0x118>
				break;
 80003c6:	bf00      	nop
 80003c8:	e002      	b.n	80003d0 <buttonsFSMO1+0x118>
				break;
 80003ca:	bf00      	nop
 80003cc:	e000      	b.n	80003d0 <buttonsFSMO1+0x118>
				break;
 80003ce:	bf00      	nop
		}
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000080 	.word	0x20000080

080003dc <buttonsFSMO2>:

void buttonsFSMO2(int i){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
		switch(currentState[i]){
 80003e4:	4a45      	ldr	r2, [pc, #276]	; (80004fc <buttonsFSMO2+0x120>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b05      	cmp	r3, #5
 80003ee:	d87a      	bhi.n	80004e6 <buttonsFSMO2+0x10a>
 80003f0:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <buttonsFSMO2+0x1c>)
 80003f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f6:	bf00      	nop
 80003f8:	08000411 	.word	0x08000411
 80003fc:	08000425 	.word	0x08000425
 8000400:	0800043d 	.word	0x0800043d
 8000404:	08000453 	.word	0x08000453
 8000408:	08000497 	.word	0x08000497
 800040c:	080004a3 	.word	0x080004a3
			case INIT:
				timerSet(DEBOUNCE2_TIMER, DEBOUNCE_DUR);
 8000410:	210a      	movs	r1, #10
 8000412:	2001      	movs	r0, #1
 8000414:	f000 ff90 	bl	8001338 <timerSet>

				currentState[i] = RELEASE;
 8000418:	4a38      	ldr	r2, [pc, #224]	; (80004fc <buttonsFSMO2+0x120>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
				break;
 8000422:	e067      	b.n	80004f4 <buttonsFSMO2+0x118>
			case RELEASE:

				if (verifyStateO(i) == Press){
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff fed3 	bl	80001d0 <verifyStateO>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d15c      	bne.n	80004ea <buttonsFSMO2+0x10e>
					currentState[i] = PRESS;
 8000430:	4a32      	ldr	r2, [pc, #200]	; (80004fc <buttonsFSMO2+0x120>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	2202      	movs	r2, #2
 8000438:	701a      	strb	r2, [r3, #0]
				}
				break;
 800043a:	e056      	b.n	80004ea <buttonsFSMO2+0x10e>
			case PRESS:
				timerSet(HOLD1_TIMER, HOLD_DUR);
 800043c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000440:	2003      	movs	r0, #3
 8000442:	f000 ff79 	bl	8001338 <timerSet>

				currentState[i] = PREHOLD;
 8000446:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <buttonsFSMO2+0x120>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	2203      	movs	r2, #3
 800044e:	701a      	strb	r2, [r3, #0]
				break;
 8000450:	e050      	b.n	80004f4 <buttonsFSMO2+0x118>
			case PREHOLD:

				if (verifyStateO(i) == Release){
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff febc 	bl	80001d0 <verifyStateO>
 8000458:	4603      	mov	r3, r0
 800045a:	2b01      	cmp	r3, #1
 800045c:	d104      	bne.n	8000468 <buttonsFSMO2+0x8c>
					currentState[i] = RELEASE;
 800045e:	4a27      	ldr	r2, [pc, #156]	; (80004fc <buttonsFSMO2+0x120>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
				}
				if (timerFlag(HOLD1_TIMER) && verifyStateO(i) == Press){
 8000468:	2003      	movs	r0, #3
 800046a:	f000 ffb5 	bl	80013d8 <timerFlag>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d03c      	beq.n	80004ee <buttonsFSMO2+0x112>
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff feab 	bl	80001d0 <verifyStateO>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d136      	bne.n	80004ee <buttonsFSMO2+0x112>
					timerSet(HOLD1_TIMER, HOLD_DUR);
 8000480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000484:	2003      	movs	r0, #3
 8000486:	f000 ff57 	bl	8001338 <timerSet>
					currentState[i] = HOLD;
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <buttonsFSMO2+0x120>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4413      	add	r3, r2
 8000490:	2204      	movs	r2, #4
 8000492:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000494:	e02b      	b.n	80004ee <buttonsFSMO2+0x112>
			case HOLD:

				currentState[i] = POSTHOLD;
 8000496:	4a19      	ldr	r2, [pc, #100]	; (80004fc <buttonsFSMO2+0x120>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	2205      	movs	r2, #5
 800049e:	701a      	strb	r2, [r3, #0]
				break;
 80004a0:	e028      	b.n	80004f4 <buttonsFSMO2+0x118>
			case POSTHOLD:

				if (verifyStateO(i) == Release){
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff fe94 	bl	80001d0 <verifyStateO>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d104      	bne.n	80004b8 <buttonsFSMO2+0xdc>
					currentState[i] = RELEASE;
 80004ae:	4a13      	ldr	r2, [pc, #76]	; (80004fc <buttonsFSMO2+0x120>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
				}
				if (timerFlag(HOLD1_TIMER) && verifyStateO(i) == Press){
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 ff8d 	bl	80013d8 <timerFlag>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d016      	beq.n	80004f2 <buttonsFSMO2+0x116>
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff fe83 	bl	80001d0 <verifyStateO>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d110      	bne.n	80004f2 <buttonsFSMO2+0x116>
					timerSet(HOLD1_TIMER, HOLD_DUR);
 80004d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d4:	2003      	movs	r0, #3
 80004d6:	f000 ff2f 	bl	8001338 <timerSet>
					currentState[i] = HOLD;
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <buttonsFSMO2+0x120>)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4413      	add	r3, r2
 80004e0:	2204      	movs	r2, #4
 80004e2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80004e4:	e005      	b.n	80004f2 <buttonsFSMO2+0x116>
			default:
				break;
 80004e6:	bf00      	nop
 80004e8:	e004      	b.n	80004f4 <buttonsFSMO2+0x118>
				break;
 80004ea:	bf00      	nop
 80004ec:	e002      	b.n	80004f4 <buttonsFSMO2+0x118>
				break;
 80004ee:	bf00      	nop
 80004f0:	e000      	b.n	80004f4 <buttonsFSMO2+0x118>
				break;
 80004f2:	bf00      	nop
		}
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000080 	.word	0x20000080

08000500 <buttonsFSMO3>:

void buttonsFSMO3(int i){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
		switch(currentState[i]){
 8000508:	4a45      	ldr	r2, [pc, #276]	; (8000620 <buttonsFSMO3+0x120>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b05      	cmp	r3, #5
 8000512:	d87a      	bhi.n	800060a <buttonsFSMO3+0x10a>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <buttonsFSMO3+0x1c>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	08000535 	.word	0x08000535
 8000520:	08000549 	.word	0x08000549
 8000524:	08000561 	.word	0x08000561
 8000528:	08000577 	.word	0x08000577
 800052c:	080005bb 	.word	0x080005bb
 8000530:	080005c7 	.word	0x080005c7
			case INIT:
				timerSet(DEBOUNCE3_TIMER, DEBOUNCE_DUR);
 8000534:	210a      	movs	r1, #10
 8000536:	2002      	movs	r0, #2
 8000538:	f000 fefe 	bl	8001338 <timerSet>

				currentState[i] = RELEASE;
 800053c:	4a38      	ldr	r2, [pc, #224]	; (8000620 <buttonsFSMO3+0x120>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
				break;
 8000546:	e067      	b.n	8000618 <buttonsFSMO3+0x118>
			case RELEASE:

				if (verifyStateO(i) == Press){
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff fe41 	bl	80001d0 <verifyStateO>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d15c      	bne.n	800060e <buttonsFSMO3+0x10e>
					currentState[i] = PRESS;
 8000554:	4a32      	ldr	r2, [pc, #200]	; (8000620 <buttonsFSMO3+0x120>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	2202      	movs	r2, #2
 800055c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800055e:	e056      	b.n	800060e <buttonsFSMO3+0x10e>
			case PRESS:
				timerSet(HOLD1_TIMER, HOLD_DUR);
 8000560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000564:	2003      	movs	r0, #3
 8000566:	f000 fee7 	bl	8001338 <timerSet>

				currentState[i] = PREHOLD;
 800056a:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <buttonsFSMO3+0x120>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	2203      	movs	r2, #3
 8000572:	701a      	strb	r2, [r3, #0]
				break;
 8000574:	e050      	b.n	8000618 <buttonsFSMO3+0x118>
			case PREHOLD:

				if (verifyStateO(i) == Release){
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff fe2a 	bl	80001d0 <verifyStateO>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d104      	bne.n	800058c <buttonsFSMO3+0x8c>
					currentState[i] = RELEASE;
 8000582:	4a27      	ldr	r2, [pc, #156]	; (8000620 <buttonsFSMO3+0x120>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
				}
				if (timerFlag(HOLD1_TIMER) && verifyStateO(i) == Press){
 800058c:	2003      	movs	r0, #3
 800058e:	f000 ff23 	bl	80013d8 <timerFlag>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d03c      	beq.n	8000612 <buttonsFSMO3+0x112>
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fe19 	bl	80001d0 <verifyStateO>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d136      	bne.n	8000612 <buttonsFSMO3+0x112>
					timerSet(HOLD1_TIMER, HOLD_DUR);
 80005a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fec5 	bl	8001338 <timerSet>
					currentState[i] = HOLD;
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <buttonsFSMO3+0x120>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	2204      	movs	r2, #4
 80005b6:	701a      	strb	r2, [r3, #0]
				}
				break;
 80005b8:	e02b      	b.n	8000612 <buttonsFSMO3+0x112>
			case HOLD:

				currentState[i] = POSTHOLD;
 80005ba:	4a19      	ldr	r2, [pc, #100]	; (8000620 <buttonsFSMO3+0x120>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	2205      	movs	r2, #5
 80005c2:	701a      	strb	r2, [r3, #0]
				break;
 80005c4:	e028      	b.n	8000618 <buttonsFSMO3+0x118>
			case POSTHOLD:

				if (verifyStateO(i) == Release){
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff fe02 	bl	80001d0 <verifyStateO>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d104      	bne.n	80005dc <buttonsFSMO3+0xdc>
					currentState[i] = RELEASE;
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <buttonsFSMO3+0x120>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4413      	add	r3, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
				}
				if (timerFlag(HOLD1_TIMER) && verifyStateO(i) == Press){
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 fefb 	bl	80013d8 <timerFlag>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d016      	beq.n	8000616 <buttonsFSMO3+0x116>
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fdf1 	bl	80001d0 <verifyStateO>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d110      	bne.n	8000616 <buttonsFSMO3+0x116>
					timerSet(HOLD1_TIMER, HOLD_DUR);
 80005f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 fe9d 	bl	8001338 <timerSet>
					currentState[i] = HOLD;
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <buttonsFSMO3+0x120>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	2204      	movs	r2, #4
 8000606:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000608:	e005      	b.n	8000616 <buttonsFSMO3+0x116>
			default:
				break;
 800060a:	bf00      	nop
 800060c:	e004      	b.n	8000618 <buttonsFSMO3+0x118>
				break;
 800060e:	bf00      	nop
 8000610:	e002      	b.n	8000618 <buttonsFSMO3+0x118>
				break;
 8000612:	bf00      	nop
 8000614:	e000      	b.n	8000618 <buttonsFSMO3+0x118>
				break;
 8000616:	bf00      	nop
		}
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000080 	.word	0x20000080

08000624 <buttonIsPressedO>:

int buttonIsPressedO(int index){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if (currentState[index] == PRESS) return 1;
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <buttonIsPressedO+0x24>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d101      	bne.n	800063c <buttonIsPressedO+0x18>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <buttonIsPressedO+0x1a>
	else return 0;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000080 	.word	0x20000080

0800064c <buttonIsHoldO>:

int buttonIsHoldO(int index){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	if (currentState[index] == HOLD) return 1;
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <buttonIsHoldO+0x24>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d101      	bne.n	8000664 <buttonIsHoldO+0x18>
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <buttonIsHoldO+0x1a>
	else return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000080 	.word	0x20000080

08000674 <display7SEGs>:
	    {0,0,0,1,1,1,1}, // 7
	    {0,0,0,0,0,0,0}, // 8
	    {0,0,0,0,1,0,0}  // 9
	  };

	  void display7SEGs(int num1, int num2) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	    if (num1 > 9 || num1 < 0 || num2 < 0 || num2 > 9) return;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b09      	cmp	r3, #9
 8000682:	dc3e      	bgt.n	8000702 <display7SEGs+0x8e>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db3b      	blt.n	8000702 <display7SEGs+0x8e>
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db38      	blt.n	8000702 <display7SEGs+0x8e>
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2b09      	cmp	r3, #9
 8000694:	dc35      	bgt.n	8000702 <display7SEGs+0x8e>
	    for (int i = 0; i < 7; i++) {
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e02e      	b.n	80006fa <display7SEGs+0x86>
	      HAL_GPIO_WritePin(GPIOB, segPins1[i], digitCode[num1][i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <display7SEGs+0x98>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80006a4:	481a      	ldr	r0, [pc, #104]	; (8000710 <display7SEGs+0x9c>)
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	4613      	mov	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	18c2      	adds	r2, r0, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	bf14      	ite	ne
 80006ba:	2301      	movne	r3, #1
 80006bc:	2300      	moveq	r3, #0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	461a      	mov	r2, r3
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <display7SEGs+0xa0>)
 80006c4:	f001 fa53 	bl	8001b6e <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, segPins2[i], digitCode[num2][i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <display7SEGs+0xa4>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80006d0:	480f      	ldr	r0, [pc, #60]	; (8000710 <display7SEGs+0x9c>)
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	18c2      	adds	r2, r0, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf14      	ite	ne
 80006e6:	2301      	movne	r3, #1
 80006e8:	2300      	moveq	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	4809      	ldr	r0, [pc, #36]	; (8000714 <display7SEGs+0xa0>)
 80006f0:	f001 fa3d 	bl	8001b6e <HAL_GPIO_WritePin>
	    for (int i = 0; i < 7; i++) {
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b06      	cmp	r3, #6
 80006fe:	ddcd      	ble.n	800069c <display7SEGs+0x28>
 8000700:	e000      	b.n	8000704 <display7SEGs+0x90>
	    if (num1 > 9 || num1 < 0 || num2 < 0 || num2 > 9) return;
 8000702:	bf00      	nop
	    }
	  }
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000000c 	.word	0x2000000c
 8000710:	08002bb0 	.word	0x08002bb0
 8000714:	40010c00 	.word	0x40010c00
 8000718:	2000001c 	.word	0x2000001c

0800071c <enableSEGs>:
	  void enableSEGs(int idx)	{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	  	for (int i = 0; i < 2; i++){
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e02b      	b.n	8000782 <enableSEGs+0x66>
	  		if(i == idx){
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	d112      	bne.n	8000758 <enableSEGs+0x3c>
	  			HAL_GPIO_WritePin(GPIOA, enablePins1[i], GPIO_PIN_RESET);
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <enableSEGs+0x78>)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	4816      	ldr	r0, [pc, #88]	; (8000798 <enableSEGs+0x7c>)
 8000740:	f001 fa15 	bl	8001b6e <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOA, enablePins2[i], GPIO_PIN_RESET);
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <enableSEGs+0x80>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <enableSEGs+0x7c>)
 8000752:	f001 fa0c 	bl	8001b6e <HAL_GPIO_WritePin>
 8000756:	e011      	b.n	800077c <enableSEGs+0x60>
	  		}
	  		else {
	  			HAL_GPIO_WritePin(GPIOA, enablePins1[i], GPIO_PIN_SET);
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <enableSEGs+0x78>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <enableSEGs+0x7c>)
 8000766:	f001 fa02 	bl	8001b6e <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOA, enablePins2[i], GPIO_PIN_SET);
 800076a:	4a0c      	ldr	r2, [pc, #48]	; (800079c <enableSEGs+0x80>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <enableSEGs+0x7c>)
 8000778:	f001 f9f9 	bl	8001b6e <HAL_GPIO_WritePin>
	  	for (int i = 0; i < 2; i++){
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b01      	cmp	r3, #1
 8000786:	ddd0      	ble.n	800072a <enableSEGs+0xe>
	  		}
	  	}
	  }
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	40010800 	.word	0x40010800
 800079c:	20000030 	.word	0x20000030

080007a0 <displayNumbers>:
int idx = 0;
void displayNumbers(int num1, int num2){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	if (timerFlag(seg_timer)){
 80007aa:	2006      	movs	r0, #6
 80007ac:	f000 fe14 	bl	80013d8 <timerFlag>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d049      	beq.n	800084a <displayNumbers+0xaa>
		timerSet(seg_timer, seg_dur);
 80007b6:	21fa      	movs	r1, #250	; 0xfa
 80007b8:	2006      	movs	r0, #6
 80007ba:	f000 fdbd 	bl	8001338 <timerSet>

		switch (idx){
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <displayNumbers+0xb4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <displayNumbers+0x2c>
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d025      	beq.n	8000816 <displayNumbers+0x76>
				enableSEGs(idx);

				idx = 0;
				break;
			default:
				break;
 80007ca:	e03f      	b.n	800084c <displayNumbers+0xac>
				display7SEGs(num1%10, num2%10);
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <displayNumbers+0xb8>)
 80007d0:	fb83 1302 	smull	r1, r3, r3, r2
 80007d4:	1099      	asrs	r1, r3, #2
 80007d6:	17d3      	asrs	r3, r2, #31
 80007d8:	1ac8      	subs	r0, r1, r3
 80007da:	4603      	mov	r3, r0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4403      	add	r3, r0
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	1ad0      	subs	r0, r2, r3
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <displayNumbers+0xb8>)
 80007e8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ec:	1099      	asrs	r1, r3, #2
 80007ee:	17d3      	asrs	r3, r2, #31
 80007f0:	1ac9      	subs	r1, r1, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	1ad1      	subs	r1, r2, r3
 80007fc:	f7ff ff3a 	bl	8000674 <display7SEGs>
				enableSEGs(idx);
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <displayNumbers+0xb4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff89 	bl	800071c <enableSEGs>
				idx++;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <displayNumbers+0xb4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <displayNumbers+0xb4>)
 8000812:	6013      	str	r3, [r2, #0]
				break;
 8000814:	e01a      	b.n	800084c <displayNumbers+0xac>
				display7SEGs(num1/10, num2/10);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <displayNumbers+0xb8>)
 800081a:	fb82 1203 	smull	r1, r2, r2, r3
 800081e:	1092      	asrs	r2, r2, #2
 8000820:	17db      	asrs	r3, r3, #31
 8000822:	1ad0      	subs	r0, r2, r3
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <displayNumbers+0xb8>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1092      	asrs	r2, r2, #2
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	4619      	mov	r1, r3
 8000834:	f7ff ff1e 	bl	8000674 <display7SEGs>
				enableSEGs(idx);
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <displayNumbers+0xb4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff6d 	bl	800071c <enableSEGs>
				idx = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <displayNumbers+0xb4>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
				break;
 8000848:	e000      	b.n	800084c <displayNumbers+0xac>
		}
	}
 800084a:	bf00      	nop
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000074 	.word	0x20000074
 8000858:	66666667 	.word	0x66666667

0800085c <displayRed1>:

void displayRed1(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2110      	movs	r1, #16
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <displayRed1+0x28>)
 8000866:	f001 f982 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2120      	movs	r1, #32
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <displayRed1+0x28>)
 8000870:	f001 f97d 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <displayRed1+0x28>)
 800087a:	f001 f978 	bl	8001b6e <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010800 	.word	0x40010800

08000888 <displayYellow1>:

void displayYellow1(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2110      	movs	r1, #16
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <displayYellow1+0x28>)
 8000892:	f001 f96c 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <displayYellow1+0x28>)
 800089c:	f001 f967 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <displayYellow1+0x28>)
 80008a6:	f001 f962 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010800 	.word	0x40010800

080008b4 <displayGreen1>:

void displayGreen1(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2110      	movs	r1, #16
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <displayGreen1+0x28>)
 80008be:	f001 f956 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2120      	movs	r1, #32
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <displayGreen1+0x28>)
 80008c8:	f001 f951 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <displayGreen1+0x28>)
 80008d2:	f001 f94c 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010800 	.word	0x40010800

080008e0 <displayRed2>:

void displayRed2(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <displayRed2+0x2c>)
 80008ea:	f001 f940 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <displayRed2+0x2c>)
 80008f6:	f001 f93a 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <displayRed2+0x2c>)
 8000902:	f001 f934 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010800 	.word	0x40010800

08000910 <displayYellow2>:

void displayYellow2(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <displayYellow2+0x2c>)
 800091a:	f001 f928 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <displayYellow2+0x2c>)
 8000926:	f001 f922 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <displayYellow2+0x2c>)
 8000932:	f001 f91c 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010800 	.word	0x40010800

08000940 <displayGreen2>:

void displayGreen2(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <displayGreen2+0x2c>)
 800094a:	f001 f910 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <displayGreen2+0x2c>)
 8000956:	f001 f90a 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <displayGreen2+0x2c>)
 8000962:	f001 f904 	bl	8001b6e <HAL_GPIO_WritePin>
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010800 	.word	0x40010800

08000970 <displayNone>:

void displayNone(){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2110      	movs	r1, #16
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <displayNone+0x48>)
 800097a:	f001 f8f8 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2120      	movs	r1, #32
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <displayNone+0x48>)
 8000984:	f001 f8f3 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <displayNone+0x48>)
 800098e:	f001 f8ee 	bl	8001b6e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	4808      	ldr	r0, [pc, #32]	; (80009b8 <displayNone+0x48>)
 8000998:	f001 f8e9 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <displayNone+0x48>)
 80009a4:	f001 f8e3 	bl	8001b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <displayNone+0x48>)
 80009b0:	f001 f8dd 	bl	8001b6e <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010800 	.word	0x40010800

080009bc <displayAllRed>:

void displayAllRed(){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	if(timerFlag(blink_timer)){
 80009c0:	2007      	movs	r0, #7
 80009c2:	f000 fd09 	bl	80013d8 <timerFlag>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00c      	beq.n	80009e6 <displayAllRed+0x2a>
		timerSet(blink_timer, blink_dur);
 80009cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009d0:	2007      	movs	r0, #7
 80009d2:	f000 fcb1 	bl	8001338 <timerSet>

		HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
 80009d6:	2110      	movs	r1, #16
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <displayAllRed+0x30>)
 80009da:	f001 f8e0 	bl	8001b9e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, RED2_Pin);
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <displayAllRed+0x30>)
 80009e2:	f001 f8dc 	bl	8001b9e <HAL_GPIO_TogglePin>
	}
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010800 	.word	0x40010800

080009f0 <displayAllGreen>:

void displayAllGreen(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	if(timerFlag(blink_timer)){
 80009f4:	2007      	movs	r0, #7
 80009f6:	f000 fcef 	bl	80013d8 <timerFlag>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <displayAllGreen+0x2c>
		timerSet(blink_timer, blink_dur);
 8000a00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a04:	2007      	movs	r0, #7
 8000a06:	f000 fc97 	bl	8001338 <timerSet>

		HAL_GPIO_TogglePin(GPIOA, GREEN1_Pin);
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <displayAllGreen+0x30>)
 8000a0e:	f001 f8c6 	bl	8001b9e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GREEN2_Pin);
 8000a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <displayAllGreen+0x30>)
 8000a18:	f001 f8c1 	bl	8001b9e <HAL_GPIO_TogglePin>
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40010800 	.word	0x40010800

08000a24 <displayAllYellow>:

void displayAllYellow(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	if(timerFlag(blink_timer)){
 8000a28:	2007      	movs	r0, #7
 8000a2a:	f000 fcd5 	bl	80013d8 <timerFlag>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00d      	beq.n	8000a50 <displayAllYellow+0x2c>
		timerSet(blink_timer, blink_dur);
 8000a34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a38:	2007      	movs	r0, #7
 8000a3a:	f000 fc7d 	bl	8001338 <timerSet>

		HAL_GPIO_TogglePin(GPIOA, YELLOW1_Pin);
 8000a3e:	2120      	movs	r1, #32
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <displayAllYellow+0x30>)
 8000a42:	f001 f8ac 	bl	8001b9e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, YELLOW2_Pin);
 8000a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <displayAllYellow+0x30>)
 8000a4c:	f001 f8a7 	bl	8001b9e <HAL_GPIO_TogglePin>
	}
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40010800 	.word	0x40010800

08000a58 <lab3_fsm1>:
int tempYellow;
int tempRed;

int count1 = red_default;
int count2 = green_default;  //default value
void lab3_fsm1(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	switch (currentState1){
 8000a5c:	4ba7      	ldr	r3, [pc, #668]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b06      	cmp	r3, #6
 8000a62:	f200 81d5 	bhi.w	8000e10 <lab3_fsm1+0x3b8>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <lab3_fsm1+0x14>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000a89 	.word	0x08000a89
 8000a70:	08000aa7 	.word	0x08000aa7
 8000a74:	08000be7 	.word	0x08000be7
 8000a78:	08000b47 	.word	0x08000b47
 8000a7c:	08000c87 	.word	0x08000c87
 8000a80:	08000d21 	.word	0x08000d21
 8000a84:	08000d93 	.word	0x08000d93
		case INIT:
			timerSet(fsm1_timer, fsm_dur);
 8000a88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a8c:	2004      	movs	r0, #4
 8000a8e:	f000 fc53 	bl	8001338 <timerSet>
			displayNone();
 8000a92:	f7ff ff6d 	bl	8000970 <displayNone>
			count1 = RED_DUR;
 8000a96:	4b9a      	ldr	r3, [pc, #616]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a9a      	ldr	r2, [pc, #616]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000a9c:	6013      	str	r3, [r2, #0]

			currentState1 = AUTO_RED;
 8000a9e:	4b97      	ldr	r3, [pc, #604]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
			break;
 8000aa4:	e1c1      	b.n	8000e2a <lab3_fsm1+0x3d2>
		case AUTO_RED:
			displayRed1();
 8000aa6:	f7ff fed9 	bl	800085c <displayRed1>
			if(timerFlag(fsm1_timer)){
 8000aaa:	2004      	movs	r0, #4
 8000aac:	f000 fc94 	bl	80013d8 <timerFlag>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d009      	beq.n	8000aca <lab3_fsm1+0x72>
				timerSet(fsm1_timer, fsm_dur);
 8000ab6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aba:	2004      	movs	r0, #4
 8000abc:	f000 fc3c 	bl	8001338 <timerSet>
				count1--;
 8000ac0:	4b90      	ldr	r3, [pc, #576]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	4a8f      	ldr	r2, [pc, #572]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000ac8:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(count1, count2);
 8000aca:	4b8e      	ldr	r3, [pc, #568]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a8e      	ldr	r2, [pc, #568]	; (8000d08 <lab3_fsm1+0x2b0>)
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe63 	bl	80007a0 <displayNumbers>

			if (buttonIsPressedO(mode_butt)){
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fda2 	bl	8000624 <buttonIsPressedO>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d010      	beq.n	8000b08 <lab3_fsm1+0xb0>
				displayNone();
 8000ae6:	f7ff ff43 	bl	8000970 <displayNone>
				tempRed = RED_DUR;
 8000aea:	4b85      	ldr	r3, [pc, #532]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a87      	ldr	r2, [pc, #540]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000af0:	6013      	str	r3, [r2, #0]
				tempGreen = GREEN_DUR;
 8000af2:	4b87      	ldr	r3, [pc, #540]	; (8000d10 <lab3_fsm1+0x2b8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a87      	ldr	r2, [pc, #540]	; (8000d14 <lab3_fsm1+0x2bc>)
 8000af8:	6013      	str	r3, [r2, #0]
				tempYellow = YELLOW_DUR;
 8000afa:	4b87      	ldr	r3, [pc, #540]	; (8000d18 <lab3_fsm1+0x2c0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a87      	ldr	r2, [pc, #540]	; (8000d1c <lab3_fsm1+0x2c4>)
 8000b00:	6013      	str	r3, [r2, #0]
				currentState1 = MAN_RED;
 8000b02:	4b7e      	ldr	r3, [pc, #504]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	701a      	strb	r2, [r3, #0]
			}
			if (buttonIsHoldO(set_butt)){
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fd9f 	bl	800064c <buttonIsHoldO>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00b      	beq.n	8000b2c <lab3_fsm1+0xd4>
				GREEN_DUR = green_default;
 8000b14:	4b7e      	ldr	r3, [pc, #504]	; (8000d10 <lab3_fsm1+0x2b8>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	601a      	str	r2, [r3, #0]
				RED_DUR = red_default;
 8000b1a:	4b79      	ldr	r3, [pc, #484]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	601a      	str	r2, [r3, #0]
				YELLOW_DUR = yellow_default;
 8000b20:	4b7d      	ldr	r3, [pc, #500]	; (8000d18 <lab3_fsm1+0x2c0>)
 8000b22:	2202      	movs	r2, #2
 8000b24:	601a      	str	r2, [r3, #0]
				currentState1 = INIT;
 8000b26:	4b75      	ldr	r3, [pc, #468]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
			}
			if (count1 <= 0){
 8000b2c:	4b75      	ldr	r3, [pc, #468]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f300 816f 	bgt.w	8000e14 <lab3_fsm1+0x3bc>
				count1 = GREEN_DUR;
 8000b36:	4b76      	ldr	r3, [pc, #472]	; (8000d10 <lab3_fsm1+0x2b8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a72      	ldr	r2, [pc, #456]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000b3c:	6013      	str	r3, [r2, #0]
				currentState1 = AUTO_GREEN;
 8000b3e:	4b6f      	ldr	r3, [pc, #444]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000b40:	2203      	movs	r2, #3
 8000b42:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b44:	e166      	b.n	8000e14 <lab3_fsm1+0x3bc>
		case AUTO_GREEN:
			displayGreen1();
 8000b46:	f7ff feb5 	bl	80008b4 <displayGreen1>
			if(timerFlag(fsm1_timer)){
 8000b4a:	2004      	movs	r0, #4
 8000b4c:	f000 fc44 	bl	80013d8 <timerFlag>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d009      	beq.n	8000b6a <lab3_fsm1+0x112>
				timerSet(fsm1_timer, fsm_dur);
 8000b56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b5a:	2004      	movs	r0, #4
 8000b5c:	f000 fbec 	bl	8001338 <timerSet>
				count1--;
 8000b60:	4b68      	ldr	r3, [pc, #416]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	4a67      	ldr	r2, [pc, #412]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000b68:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(count1, count2);
 8000b6a:	4b66      	ldr	r3, [pc, #408]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a66      	ldr	r2, [pc, #408]	; (8000d08 <lab3_fsm1+0x2b0>)
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe13 	bl	80007a0 <displayNumbers>

			if (buttonIsPressedO(mode_butt)){
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fd52 	bl	8000624 <buttonIsPressedO>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d010      	beq.n	8000ba8 <lab3_fsm1+0x150>
				displayNone();
 8000b86:	f7ff fef3 	bl	8000970 <displayNone>
				tempRed = RED_DUR;
 8000b8a:	4b5d      	ldr	r3, [pc, #372]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a5f      	ldr	r2, [pc, #380]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000b90:	6013      	str	r3, [r2, #0]
				tempGreen = GREEN_DUR;
 8000b92:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <lab3_fsm1+0x2b8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a5f      	ldr	r2, [pc, #380]	; (8000d14 <lab3_fsm1+0x2bc>)
 8000b98:	6013      	str	r3, [r2, #0]
				tempYellow = YELLOW_DUR;
 8000b9a:	4b5f      	ldr	r3, [pc, #380]	; (8000d18 <lab3_fsm1+0x2c0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a5f      	ldr	r2, [pc, #380]	; (8000d1c <lab3_fsm1+0x2c4>)
 8000ba0:	6013      	str	r3, [r2, #0]
				currentState1 = MAN_RED;
 8000ba2:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonIsHoldO(set_butt)){
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff fd4f 	bl	800064c <buttonIsHoldO>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00b      	beq.n	8000bcc <lab3_fsm1+0x174>
				GREEN_DUR = green_default;
 8000bb4:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <lab3_fsm1+0x2b8>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	601a      	str	r2, [r3, #0]
				RED_DUR = red_default;
 8000bba:	4b51      	ldr	r3, [pc, #324]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	601a      	str	r2, [r3, #0]
				YELLOW_DUR = yellow_default;
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <lab3_fsm1+0x2c0>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	601a      	str	r2, [r3, #0]
				currentState1 = INIT;
 8000bc6:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
			}
			if (count1 <= 0){
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f300 8121 	bgt.w	8000e18 <lab3_fsm1+0x3c0>
				count1 = YELLOW_DUR;
 8000bd6:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <lab3_fsm1+0x2c0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a4a      	ldr	r2, [pc, #296]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000bdc:	6013      	str	r3, [r2, #0]
				currentState1 = AUTO_YELLOW;
 8000bde:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000be4:	e118      	b.n	8000e18 <lab3_fsm1+0x3c0>
		case AUTO_YELLOW:
			displayYellow1();
 8000be6:	f7ff fe4f 	bl	8000888 <displayYellow1>
			if(timerFlag(fsm1_timer)){
 8000bea:	2004      	movs	r0, #4
 8000bec:	f000 fbf4 	bl	80013d8 <timerFlag>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d009      	beq.n	8000c0a <lab3_fsm1+0x1b2>
				timerSet(fsm1_timer, fsm_dur);
 8000bf6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bfa:	2004      	movs	r0, #4
 8000bfc:	f000 fb9c 	bl	8001338 <timerSet>
				count1--;
 8000c00:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	4a3f      	ldr	r2, [pc, #252]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000c08:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(count1, count2);
 8000c0a:	4b3e      	ldr	r3, [pc, #248]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a3e      	ldr	r2, [pc, #248]	; (8000d08 <lab3_fsm1+0x2b0>)
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fdc3 	bl	80007a0 <displayNumbers>

			if (buttonIsPressedO(mode_butt)){
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fd02 	bl	8000624 <buttonIsPressedO>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d010      	beq.n	8000c48 <lab3_fsm1+0x1f0>
				displayNone();
 8000c26:	f7ff fea3 	bl	8000970 <displayNone>
				tempRed = RED_DUR;
 8000c2a:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000c30:	6013      	str	r3, [r2, #0]
				tempGreen = GREEN_DUR;
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <lab3_fsm1+0x2b8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <lab3_fsm1+0x2bc>)
 8000c38:	6013      	str	r3, [r2, #0]
				tempYellow = YELLOW_DUR;
 8000c3a:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <lab3_fsm1+0x2c0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a37      	ldr	r2, [pc, #220]	; (8000d1c <lab3_fsm1+0x2c4>)
 8000c40:	6013      	str	r3, [r2, #0]
				currentState1 = MAN_RED;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	701a      	strb	r2, [r3, #0]
			}
			if (buttonIsHoldO(set_butt)){
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fcff 	bl	800064c <buttonIsHoldO>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d00b      	beq.n	8000c6c <lab3_fsm1+0x214>
				GREEN_DUR = green_default;
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <lab3_fsm1+0x2b8>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	601a      	str	r2, [r3, #0]
				RED_DUR = red_default;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	601a      	str	r2, [r3, #0]
				YELLOW_DUR = yellow_default;
 8000c60:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <lab3_fsm1+0x2c0>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	601a      	str	r2, [r3, #0]
				currentState1 = INIT;
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
			}
			if (count1 == 0){
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f040 80d3 	bne.w	8000e1c <lab3_fsm1+0x3c4>
				count1 = RED_DUR;
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <lab3_fsm1+0x2ac>)
 8000c7c:	6013      	str	r3, [r2, #0]
				currentState1 = AUTO_RED;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c84:	e0ca      	b.n	8000e1c <lab3_fsm1+0x3c4>
		case MAN_RED:
			displayAllRed();
 8000c86:	f7ff fe99 	bl	80009bc <displayAllRed>
			if (buttonIsPressedO(change_butt)){
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fcca 	bl	8000624 <buttonIsPressedO>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <lab3_fsm1+0x248>
				tempRed++;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000c9e:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsHoldO(change_butt)){
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fcd3 	bl	800064c <buttonIsHoldO>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d004      	beq.n	8000cb6 <lab3_fsm1+0x25e>
				tempRed--;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000cb4:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(tempRed, 2);
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd6f 	bl	80007a0 <displayNumbers>
			if (buttonIsPressedO(set_butt)){
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff fcae 	bl	8000624 <buttonIsPressedO>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d008      	beq.n	8000ce0 <lab3_fsm1+0x288>
				RED_DUR = tempRed;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <lab3_fsm1+0x2b4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <lab3_fsm1+0x2a8>)
 8000cd4:	6013      	str	r3, [r2, #0]
				displayNone();
 8000cd6:	f7ff fe4b 	bl	8000970 <displayNone>
				currentState1 = MAN_GREEN;			//Khi set xong chuyển luôn sang manual tiếp theo
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000cdc:	2205      	movs	r2, #5
 8000cde:	701a      	strb	r2, [r3, #0]
			}

			if (buttonIsPressedO(mode_butt)) {
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fc9f 	bl	8000624 <buttonIsPressedO>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 8099 	beq.w	8000e20 <lab3_fsm1+0x3c8>
				displayNone();
 8000cee:	f7ff fe3f 	bl	8000970 <displayNone>
				currentState1 = MAN_GREEN;
 8000cf2:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <lab3_fsm1+0x2a4>)
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cf8:	e092      	b.n	8000e20 <lab3_fsm1+0x3c8>
 8000cfa:	bf00      	nop
 8000cfc:	20000078 	.word	0x20000078
 8000d00:	20000038 	.word	0x20000038
 8000d04:	20000040 	.word	0x20000040
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	200000a4 	.word	0x200000a4
 8000d10:	20000034 	.word	0x20000034
 8000d14:	200000ac 	.word	0x200000ac
 8000d18:	2000003c 	.word	0x2000003c
 8000d1c:	200000a8 	.word	0x200000a8
		case MAN_GREEN:
			displayAllGreen();
 8000d20:	f7ff fe66 	bl	80009f0 <displayAllGreen>
			if (buttonIsPressedO(change_butt)){
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fc7d 	bl	8000624 <buttonIsPressedO>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <lab3_fsm1+0x2e2>
				tempGreen++;
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <lab3_fsm1+0x3d8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a3e      	ldr	r2, [pc, #248]	; (8000e30 <lab3_fsm1+0x3d8>)
 8000d38:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsHoldO(change_butt)){
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fc86 	bl	800064c <buttonIsHoldO>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d004      	beq.n	8000d50 <lab3_fsm1+0x2f8>
				tempGreen--;
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <lab3_fsm1+0x3d8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	4a38      	ldr	r2, [pc, #224]	; (8000e30 <lab3_fsm1+0x3d8>)
 8000d4e:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(tempGreen, 3);
 8000d50:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <lab3_fsm1+0x3d8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2103      	movs	r1, #3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd22 	bl	80007a0 <displayNumbers>
			if (buttonIsPressedO(set_butt)){
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f7ff fc61 	bl	8000624 <buttonIsPressedO>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d008      	beq.n	8000d7a <lab3_fsm1+0x322>
				GREEN_DUR = tempGreen;
 8000d68:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <lab3_fsm1+0x3d8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <lab3_fsm1+0x3dc>)
 8000d6e:	6013      	str	r3, [r2, #0]
				displayNone();
 8000d70:	f7ff fdfe 	bl	8000970 <displayNone>
				currentState1 = MAN_YELLOW;
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <lab3_fsm1+0x3e0>)
 8000d76:	2206      	movs	r2, #6
 8000d78:	701a      	strb	r2, [r3, #0]
			}

			if (buttonIsPressedO(mode_butt)) {
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fc52 	bl	8000624 <buttonIsPressedO>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d04e      	beq.n	8000e24 <lab3_fsm1+0x3cc>
				displayNone();
 8000d86:	f7ff fdf3 	bl	8000970 <displayNone>
				currentState1 = MAN_YELLOW;
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <lab3_fsm1+0x3e0>)
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d90:	e048      	b.n	8000e24 <lab3_fsm1+0x3cc>
		case MAN_YELLOW:
			displayAllYellow();
 8000d92:	f7ff fe47 	bl	8000a24 <displayAllYellow>
			if (buttonIsPressedO(change_butt)){
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fc44 	bl	8000624 <buttonIsPressedO>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <lab3_fsm1+0x354>
				tempYellow++;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <lab3_fsm1+0x3e4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <lab3_fsm1+0x3e4>)
 8000daa:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsHoldO(change_butt)){
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff fc4d 	bl	800064c <buttonIsHoldO>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <lab3_fsm1+0x36a>
				tempYellow--;
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <lab3_fsm1+0x3e4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <lab3_fsm1+0x3e4>)
 8000dc0:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(tempYellow, 4);
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <lab3_fsm1+0x3e4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fce9 	bl	80007a0 <displayNumbers>
			if (buttonIsPressedO(set_butt)){
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f7ff fc28 	bl	8000624 <buttonIsPressedO>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <lab3_fsm1+0x39a>
				YELLOW_DUR = tempYellow;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <lab3_fsm1+0x3e4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <lab3_fsm1+0x3e8>)
 8000de0:	6013      	str	r3, [r2, #0]
				displayNone();
 8000de2:	f7ff fdc5 	bl	8000970 <displayNone>
				currentState1 = INIT;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <lab3_fsm1+0x3e0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
				currentState2 = INIT;		//cho cả hai
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <lab3_fsm1+0x3ec>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonIsPressedO(mode_butt)){
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fc16 	bl	8000624 <buttonIsPressedO>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d014      	beq.n	8000e28 <lab3_fsm1+0x3d0>
				displayNone();
 8000dfe:	f7ff fdb7 	bl	8000970 <displayNone>
				currentState1 = INIT;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <lab3_fsm1+0x3e0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
				currentState2 = INIT;			//bug ở đâu đó quanh đây
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <lab3_fsm1+0x3ec>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e0e:	e00b      	b.n	8000e28 <lab3_fsm1+0x3d0>
		default:
			break;
 8000e10:	bf00      	nop
 8000e12:	e00a      	b.n	8000e2a <lab3_fsm1+0x3d2>
			break;
 8000e14:	bf00      	nop
 8000e16:	e008      	b.n	8000e2a <lab3_fsm1+0x3d2>
			break;
 8000e18:	bf00      	nop
 8000e1a:	e006      	b.n	8000e2a <lab3_fsm1+0x3d2>
			break;
 8000e1c:	bf00      	nop
 8000e1e:	e004      	b.n	8000e2a <lab3_fsm1+0x3d2>
			break;
 8000e20:	bf00      	nop
 8000e22:	e002      	b.n	8000e2a <lab3_fsm1+0x3d2>
			break;
 8000e24:	bf00      	nop
 8000e26:	e000      	b.n	8000e2a <lab3_fsm1+0x3d2>
			break;
 8000e28:	bf00      	nop
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000ac 	.word	0x200000ac
 8000e34:	20000034 	.word	0x20000034
 8000e38:	20000078 	.word	0x20000078
 8000e3c:	200000a8 	.word	0x200000a8
 8000e40:	2000003c 	.word	0x2000003c
 8000e44:	20000079 	.word	0x20000079

08000e48 <lab3_fsm2>:

void lab3_fsm2(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	switch (currentState2){
 8000e4c:	4b7b      	ldr	r3, [pc, #492]	; (800103c <lab3_fsm2+0x1f4>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b06      	cmp	r3, #6
 8000e52:	f200 80ea 	bhi.w	800102a <lab3_fsm2+0x1e2>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <lab3_fsm2+0x14>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000e79 	.word	0x08000e79
 8000e60:	08000e97 	.word	0x08000e97
 8000e64:	08000fa5 	.word	0x08000fa5
 8000e68:	08000f1f 	.word	0x08000f1f
 8000e6c:	0800102b 	.word	0x0800102b
 8000e70:	0800102b 	.word	0x0800102b
 8000e74:	0800102b 	.word	0x0800102b
		case INIT:
			timerSet(fsm2_timer, fsm_dur);
 8000e78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e7c:	2005      	movs	r0, #5
 8000e7e:	f000 fa5b 	bl	8001338 <timerSet>
			displayNone();
 8000e82:	f7ff fd75 	bl	8000970 <displayNone>
			count2 = GREEN_DUR;
 8000e86:	4b6e      	ldr	r3, [pc, #440]	; (8001040 <lab3_fsm2+0x1f8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a6e      	ldr	r2, [pc, #440]	; (8001044 <lab3_fsm2+0x1fc>)
 8000e8c:	6013      	str	r3, [r2, #0]

			currentState2 = AUTO_GREEN;
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	; (800103c <lab3_fsm2+0x1f4>)
 8000e90:	2203      	movs	r2, #3
 8000e92:	701a      	strb	r2, [r3, #0]
			break;
 8000e94:	e0d0      	b.n	8001038 <lab3_fsm2+0x1f0>
		case AUTO_RED:
			displayRed2();
 8000e96:	f7ff fd23 	bl	80008e0 <displayRed2>
			if(timerFlag(fsm2_timer)){
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f000 fa9c 	bl	80013d8 <timerFlag>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <lab3_fsm2+0x72>
				timerSet(fsm2_timer, fsm_dur);
 8000ea6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eaa:	2005      	movs	r0, #5
 8000eac:	f000 fa44 	bl	8001338 <timerSet>
				count2--;
 8000eb0:	4b64      	ldr	r3, [pc, #400]	; (8001044 <lab3_fsm2+0x1fc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a63      	ldr	r2, [pc, #396]	; (8001044 <lab3_fsm2+0x1fc>)
 8000eb8:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(count1, count2);
 8000eba:	4b63      	ldr	r3, [pc, #396]	; (8001048 <lab3_fsm2+0x200>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a61      	ldr	r2, [pc, #388]	; (8001044 <lab3_fsm2+0x1fc>)
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fc6b 	bl	80007a0 <displayNumbers>

			if (buttonIsPressedO(mode_butt)){
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fbaa 	bl	8000624 <buttonIsPressedO>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <lab3_fsm2+0x98>
				displayNone();
 8000ed6:	f7ff fd4b 	bl	8000970 <displayNone>
				currentState2 = MAN_RED;
 8000eda:	4b58      	ldr	r3, [pc, #352]	; (800103c <lab3_fsm2+0x1f4>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	701a      	strb	r2, [r3, #0]
			}
			if (buttonIsHoldO(set_butt)){
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f7ff fbb3 	bl	800064c <buttonIsHoldO>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <lab3_fsm2+0xbc>
				GREEN_DUR = green_default;
 8000eec:	4b54      	ldr	r3, [pc, #336]	; (8001040 <lab3_fsm2+0x1f8>)
 8000eee:	2203      	movs	r2, #3
 8000ef0:	601a      	str	r2, [r3, #0]
				RED_DUR = red_default;
 8000ef2:	4b56      	ldr	r3, [pc, #344]	; (800104c <lab3_fsm2+0x204>)
 8000ef4:	2205      	movs	r2, #5
 8000ef6:	601a      	str	r2, [r3, #0]
				YELLOW_DUR = yellow_default;
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <lab3_fsm2+0x208>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	601a      	str	r2, [r3, #0]
				currentState2 = INIT;
 8000efe:	4b4f      	ldr	r3, [pc, #316]	; (800103c <lab3_fsm2+0x1f4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
			}
			if (count2 <= 0){
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <lab3_fsm2+0x1fc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f300 8090 	bgt.w	800102e <lab3_fsm2+0x1e6>
				count2 = GREEN_DUR;
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <lab3_fsm2+0x1f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <lab3_fsm2+0x1fc>)
 8000f14:	6013      	str	r3, [r2, #0]
				currentState2 = AUTO_GREEN;
 8000f16:	4b49      	ldr	r3, [pc, #292]	; (800103c <lab3_fsm2+0x1f4>)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f1c:	e087      	b.n	800102e <lab3_fsm2+0x1e6>
		case AUTO_GREEN:
			displayGreen2();
 8000f1e:	f7ff fd0f 	bl	8000940 <displayGreen2>
			if(timerFlag(fsm2_timer)){
 8000f22:	2005      	movs	r0, #5
 8000f24:	f000 fa58 	bl	80013d8 <timerFlag>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d009      	beq.n	8000f42 <lab3_fsm2+0xfa>
				timerSet(fsm2_timer, fsm_dur);
 8000f2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f32:	2005      	movs	r0, #5
 8000f34:	f000 fa00 	bl	8001338 <timerSet>
				count2--;
 8000f38:	4b42      	ldr	r3, [pc, #264]	; (8001044 <lab3_fsm2+0x1fc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	4a41      	ldr	r2, [pc, #260]	; (8001044 <lab3_fsm2+0x1fc>)
 8000f40:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(count1, count2);
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <lab3_fsm2+0x200>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <lab3_fsm2+0x1fc>)
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fc27 	bl	80007a0 <displayNumbers>

			if (buttonIsPressedO(mode_butt)){
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fb66 	bl	8000624 <buttonIsPressedO>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <lab3_fsm2+0x120>
				displayNone();
 8000f5e:	f7ff fd07 	bl	8000970 <displayNone>
				currentState2 = MAN_RED;
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <lab3_fsm2+0x1f4>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	701a      	strb	r2, [r3, #0]
			}
			if (buttonIsHoldO(set_butt)){
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f7ff fb6f 	bl	800064c <buttonIsHoldO>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00b      	beq.n	8000f8c <lab3_fsm2+0x144>
				GREEN_DUR = green_default;
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <lab3_fsm2+0x1f8>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	601a      	str	r2, [r3, #0]
				RED_DUR = red_default;
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <lab3_fsm2+0x204>)
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	601a      	str	r2, [r3, #0]
				YELLOW_DUR = yellow_default;
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <lab3_fsm2+0x208>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	601a      	str	r2, [r3, #0]
				currentState2 = INIT;
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <lab3_fsm2+0x1f4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
			}
			if (count2 <= 0){
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <lab3_fsm2+0x1fc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dc4e      	bgt.n	8001032 <lab3_fsm2+0x1ea>
				count2 = YELLOW_DUR;
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <lab3_fsm2+0x208>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <lab3_fsm2+0x1fc>)
 8000f9a:	6013      	str	r3, [r2, #0]
				currentState2 = AUTO_YELLOW;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <lab3_fsm2+0x1f4>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fa2:	e046      	b.n	8001032 <lab3_fsm2+0x1ea>
		case AUTO_YELLOW:
			displayYellow2();
 8000fa4:	f7ff fcb4 	bl	8000910 <displayYellow2>
			if(timerFlag(fsm2_timer)){
 8000fa8:	2005      	movs	r0, #5
 8000faa:	f000 fa15 	bl	80013d8 <timerFlag>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d009      	beq.n	8000fc8 <lab3_fsm2+0x180>
				timerSet(fsm2_timer, fsm_dur);
 8000fb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fb8:	2005      	movs	r0, #5
 8000fba:	f000 f9bd 	bl	8001338 <timerSet>
				count2--;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <lab3_fsm2+0x1fc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <lab3_fsm2+0x1fc>)
 8000fc6:	6013      	str	r3, [r2, #0]
			}
			displayNumbers(count1, count2);
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <lab3_fsm2+0x200>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <lab3_fsm2+0x1fc>)
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fbe4 	bl	80007a0 <displayNumbers>

			if (buttonIsPressedO(mode_butt)){
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fb23 	bl	8000624 <buttonIsPressedO>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <lab3_fsm2+0x1a6>
				displayNone();
 8000fe4:	f7ff fcc4 	bl	8000970 <displayNone>
				currentState2 = MAN_RED;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <lab3_fsm2+0x1f4>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	701a      	strb	r2, [r3, #0]
			}
			if (buttonIsHoldO(set_butt)){
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff fb2c 	bl	800064c <buttonIsHoldO>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <lab3_fsm2+0x1ca>
				GREEN_DUR = green_default;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <lab3_fsm2+0x1f8>)
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	601a      	str	r2, [r3, #0]
				RED_DUR = red_default;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <lab3_fsm2+0x204>)
 8001002:	2205      	movs	r2, #5
 8001004:	601a      	str	r2, [r3, #0]
				YELLOW_DUR = yellow_default;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <lab3_fsm2+0x208>)
 8001008:	2202      	movs	r2, #2
 800100a:	601a      	str	r2, [r3, #0]
				currentState2 = INIT;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <lab3_fsm2+0x1f4>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			}
			if (count2 <= 0){
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <lab3_fsm2+0x1fc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dc0d      	bgt.n	8001036 <lab3_fsm2+0x1ee>
				count2 = RED_DUR;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <lab3_fsm2+0x204>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <lab3_fsm2+0x1fc>)
 8001020:	6013      	str	r3, [r2, #0]
				currentState2 = AUTO_RED;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <lab3_fsm2+0x1f4>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001028:	e005      	b.n	8001036 <lab3_fsm2+0x1ee>
			break;
		case MAN_YELLOW:

			break;
		default:
			break;
 800102a:	bf00      	nop
 800102c:	e004      	b.n	8001038 <lab3_fsm2+0x1f0>
			break;
 800102e:	bf00      	nop
 8001030:	e002      	b.n	8001038 <lab3_fsm2+0x1f0>
			break;
 8001032:	bf00      	nop
 8001034:	e000      	b.n	8001038 <lab3_fsm2+0x1f0>
			break;
 8001036:	bf00      	nop
	}
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000079 	.word	0x20000079
 8001040:	20000034 	.word	0x20000034
 8001044:	20000044 	.word	0x20000044
 8001048:	20000040 	.word	0x20000040
 800104c:	20000038 	.word	0x20000038
 8001050:	2000003c 	.word	0x2000003c

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fa88 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f872 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 f8f8 	bl	8001254 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001064:	f000 f8aa 	bl	80011bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001068:	4834      	ldr	r0, [pc, #208]	; (800113c <main+0xe8>)
 800106a:	f001 f9dd 	bl	8002428 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timerSet(6, 25);
 800106e:	2119      	movs	r1, #25
 8001070:	2006      	movs	r0, #6
 8001072:	f000 f961 	bl	8001338 <timerSet>
  timerSet(7, 500);
 8001076:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800107a:	2007      	movs	r0, #7
 800107c:	f000 f95c 	bl	8001338 <timerSet>
  buttonsInitO(GPIOA, BUTTON1_Pin);
 8001080:	2102      	movs	r1, #2
 8001082:	482f      	ldr	r0, [pc, #188]	; (8001140 <main+0xec>)
 8001084:	f7ff f862 	bl	800014c <buttonsInitO>
  buttonsInitO(GPIOA, BUTTON2_Pin);
 8001088:	2104      	movs	r1, #4
 800108a:	482d      	ldr	r0, [pc, #180]	; (8001140 <main+0xec>)
 800108c:	f7ff f85e 	bl	800014c <buttonsInitO>
  buttonsInitO(GPIOA, BUTTON3_Pin);
 8001090:	2108      	movs	r1, #8
 8001092:	482b      	ldr	r0, [pc, #172]	; (8001140 <main+0xec>)
 8001094:	f7ff f85a 	bl	800014c <buttonsInitO>
  HAL_GPIO_WritePin(GPIOA, EN1W1_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	4828      	ldr	r0, [pc, #160]	; (8001140 <main+0xec>)
 80010a0:	f000 fd65 	bl	8001b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN2W1_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <main+0xec>)
 80010ac:	f000 fd5f 	bl	8001b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN1W2_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4822      	ldr	r0, [pc, #136]	; (8001140 <main+0xec>)
 80010b8:	f000 fd59 	bl	8001b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN2W2_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	481f      	ldr	r0, [pc, #124]	; (8001140 <main+0xec>)
 80010c4:	f000 fd53 	bl	8001b6e <HAL_GPIO_WritePin>

  while (1)
  {
	  buttonsFSMO1(0);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff f8f5 	bl	80002b8 <buttonsFSMO1>
	  buttonsFSMO2(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff f984 	bl	80003dc <buttonsFSMO2>
	  buttonsFSMO3(2);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff fa13 	bl	8000500 <buttonsFSMO3>
	  if (buttonIsPressedO(0) || buttonIsPressedO(1) || buttonIsPressedO(2)){
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff faa2 	bl	8000624 <buttonIsPressedO>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10b      	bne.n	80010fe <main+0xaa>
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fa9c 	bl	8000624 <buttonIsPressedO>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <main+0xaa>
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff fa96 	bl	8000624 <buttonIsPressedO>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <main+0xb2>
		 HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 80010fe:	2101      	movs	r1, #1
 8001100:	480f      	ldr	r0, [pc, #60]	; (8001140 <main+0xec>)
 8001102:	f000 fd4c 	bl	8001b9e <HAL_GPIO_TogglePin>
	  }
	  if (buttonIsHoldO(0) || buttonIsHoldO(1) || buttonIsHoldO(2)){
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff faa0 	bl	800064c <buttonIsHoldO>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10b      	bne.n	800112a <main+0xd6>
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fa9a 	bl	800064c <buttonIsHoldO>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d105      	bne.n	800112a <main+0xd6>
 800111e:	2002      	movs	r0, #2
 8001120:	f7ff fa94 	bl	800064c <buttonIsHoldO>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <main+0xde>
		  HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 800112a:	2101      	movs	r1, #1
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <main+0xec>)
 800112e:	f000 fd36 	bl	8001b9e <HAL_GPIO_TogglePin>
	  }
	  lab3_fsm1();
 8001132:	f7ff fc91 	bl	8000a58 <lab3_fsm1>
	  lab3_fsm2();
 8001136:	f7ff fe87 	bl	8000e48 <lab3_fsm2>
	  buttonsFSMO1(0);
 800113a:	e7c5      	b.n	80010c8 <main+0x74>
 800113c:	200000b0 	.word	0x200000b0
 8001140:	40010800 	.word	0x40010800

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b090      	sub	sp, #64	; 0x40
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fd18 	bl	8002b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2310      	movs	r3, #16
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fd28 	bl	8001bd0 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001186:	f000 f8d1 	bl	800132c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ff94 	bl	80020d0 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ae:	f000 f8bd 	bl	800132c <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	; 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM2_Init+0x94>)
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_TIM2_Init+0x94>)
 80011e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_TIM2_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f0:	2209      	movs	r2, #9
 80011f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM2_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM2_Init+0x94>)
 8001202:	f001 f8c1 	bl	8002388 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800120c:	f000 f88e 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_TIM2_Init+0x94>)
 800121e:	f001 fa3f 	bl	80026a0 <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 f880 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM2_Init+0x94>)
 800123a:	f001 fc17 	bl	8002a6c <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001244:	f000 f872 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000b0 	.word	0x200000b0

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_GPIO_Init+0xb8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <MX_GPIO_Init+0xb8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_GPIO_Init+0xb8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_GPIO_Init+0xb8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <MX_GPIO_Init+0xb8>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_GPIO_Init+0xb8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|RED1_Pin|YELLOW1_Pin|GREEN1_Pin
 8001298:	2200      	movs	r2, #0
 800129a:	f643 71f1 	movw	r1, #16369	; 0x3ff1
 800129e:	481c      	ldr	r0, [pc, #112]	; (8001310 <MX_GPIO_Init+0xbc>)
 80012a0:	f000 fc65 	bl	8001b6e <HAL_GPIO_WritePin>
                          |RED2_Pin|YELLOW2_Pin|GREEN2_Pin|EN1W1_Pin
                          |EN2W1_Pin|EN1W2_Pin|EN2W2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 80012a4:	2200      	movs	r2, #0
 80012a6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80012aa:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_GPIO_Init+0xc0>)
 80012ac:	f000 fc5f 	bl	8001b6e <HAL_GPIO_WritePin>
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin RED1_Pin YELLOW1_Pin GREEN1_Pin
                           RED2_Pin YELLOW2_Pin GREEN2_Pin EN1W1_Pin
                           EN2W1_Pin EN1W2_Pin EN2W2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RED1_Pin|YELLOW1_Pin|GREEN1_Pin
 80012b0:	f643 73f1 	movw	r3, #16369	; 0x3ff1
 80012b4:	60bb      	str	r3, [r7, #8]
                          |RED2_Pin|YELLOW2_Pin|GREEN2_Pin|EN1W1_Pin
                          |EN2W1_Pin|EN1W2_Pin|EN2W2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2302      	movs	r3, #2
 80012c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_GPIO_Init+0xbc>)
 80012ca:	f000 fabf 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80012ce:	230e      	movs	r3, #14
 80012d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <MX_GPIO_Init+0xbc>)
 80012e2:	f000 fab3 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 80012e6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80012ea:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2302      	movs	r3, #2
 80012f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_GPIO_Init+0xc0>)
 8001300:	f000 faa4 	bl	800184c <HAL_GPIO_Init>

}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800
 8001314:	40010c00 	.word	0x40010c00

08001318 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001320:	f000 f82a 	bl	8001378 <timerRun>
	//getKeyInput();
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <timerSet>:
#include "software_timer.h"
#define timer_cycle 	10
#define NO_OF_TIMER		10
struct TimerStruct timerArray[NO_OF_TIMER];

void timerSet(int idx, int counter){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	timerArray[idx].counter = counter / timer_cycle;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <timerSet+0x38>)
 8001346:	fb82 1203 	smull	r1, r2, r2, r3
 800134a:	1092      	asrs	r2, r2, #2
 800134c:	17db      	asrs	r3, r3, #31
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	4908      	ldr	r1, [pc, #32]	; (8001374 <timerSet+0x3c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timerArray[idx].flag = 0;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <timerSet+0x3c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	66666667 	.word	0x66666667
 8001374:	200000f8 	.word	0x200000f8

08001378 <timerRun>:

void timerRun(){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_TIMER; i++){
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e01d      	b.n	80013c0 <timerRun+0x48>
		if(timerArray[i].counter > 0){
 8001384:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <timerRun+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd14      	ble.n	80013ba <timerRun+0x42>
			timerArray[i].counter--;
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <timerRun+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	490e      	ldr	r1, [pc, #56]	; (80013d4 <timerRun+0x5c>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if (timerArray[i].counter <= 0){
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <timerRun+0x5c>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dc05      	bgt.n	80013ba <timerRun+0x42>
				timerArray[i].flag = 1;
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <timerRun+0x5c>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < NO_OF_TIMER; i++){
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3301      	adds	r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b09      	cmp	r3, #9
 80013c4:	ddde      	ble.n	8001384 <timerRun+0xc>
			}
		}
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200000f8 	.word	0x200000f8

080013d8 <timerFlag>:

int timerFlag(int idx){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(timerArray[idx].flag){
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <timerFlag+0x28>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <timerFlag+0x1a>
		return 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <timerFlag+0x1c>
	}
	return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200000f8 	.word	0x200000f8

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_MspInit+0x5c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_MspInit+0x5c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_MspInit+0x5c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_MspInit+0x5c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_MspInit+0x5c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x5c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_MspInit+0x60>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_MspInit+0x60>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001478:	d113      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	201c      	movs	r0, #28
 8001498:	f000 f9a1 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800149c:	201c      	movs	r0, #28
 800149e:	f000 f9ba 	bl	8001816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f87f 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f000 ffdb 	bl	80024c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000b0 	.word	0x200000b0

08001514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001520:	f7ff fff8 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001526:	490c      	ldr	r1, [pc, #48]	; (8001558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <LoopFillZerobss+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800153c:	4c09      	ldr	r4, [pc, #36]	; (8001564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 faf9 	bl	8002b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154e:	f7ff fd81 	bl	8001054 <main>
  bx lr
 8001552:	4770      	bx	lr
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800155c:	08002c24 	.word	0x08002c24
  ldr r2, =_sbss
 8001560:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001564:	2000014c 	.word	0x2000014c

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f923 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff ff3c 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f93b 	bl	8001832 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f903 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000048 	.word	0x20000048
 80015f0:	20000050 	.word	0x20000050
 80015f4:	2000004c 	.word	0x2000004c

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000050 	.word	0x20000050
 8001618:	20000148 	.word	0x20000148

0800161c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000148 	.word	0x20000148

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4906      	ldr	r1, [pc, #24]	; (80016c8 <__NVIC_EnableIRQ+0x34>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff90 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff2d 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff42 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff90 	bl	8001720 <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5f 	bl	80016cc <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff35 	bl	8001694 <__NVIC_EnableIRQ>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffa2 	bl	8001784 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e148      	b.n	8001af2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8137 	bne.w	8001aec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4aa3      	ldr	r2, [pc, #652]	; (8001b10 <HAL_GPIO_Init+0x2c4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d05e      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001888:	4aa1      	ldr	r2, [pc, #644]	; (8001b10 <HAL_GPIO_Init+0x2c4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d875      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800188e:	4aa1      	ldr	r2, [pc, #644]	; (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d058      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001894:	4a9f      	ldr	r2, [pc, #636]	; (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d86f      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800189a:	4a9f      	ldr	r2, [pc, #636]	; (8001b18 <HAL_GPIO_Init+0x2cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d052      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018a0:	4a9d      	ldr	r2, [pc, #628]	; (8001b18 <HAL_GPIO_Init+0x2cc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d869      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018a6:	4a9d      	ldr	r2, [pc, #628]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04c      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018ac:	4a9b      	ldr	r2, [pc, #620]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d863      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018b2:	4a9b      	ldr	r2, [pc, #620]	; (8001b20 <HAL_GPIO_Init+0x2d4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d046      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018b8:	4a99      	ldr	r2, [pc, #612]	; (8001b20 <HAL_GPIO_Init+0x2d4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d85d      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d82a      	bhi.n	8001918 <HAL_GPIO_Init+0xcc>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d859      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_GPIO_Init+0x80>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001921 	.word	0x08001921
 80018d4:	08001933 	.word	0x08001933
 80018d8:	08001975 	.word	0x08001975
 80018dc:	0800197b 	.word	0x0800197b
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800197b 	.word	0x0800197b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	08001929 	.word	0x08001929
 8001914:	0800193d 	.word	0x0800193d
 8001918:	4a82      	ldr	r2, [pc, #520]	; (8001b24 <HAL_GPIO_Init+0x2d8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191e:	e02c      	b.n	800197a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e029      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e024      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	3308      	adds	r3, #8
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e01f      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	330c      	adds	r3, #12
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e01a      	b.n	800197c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194e:	2304      	movs	r3, #4
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e013      	b.n	800197c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	611a      	str	r2, [r3, #16]
          break;
 8001966:	e009      	b.n	800197c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	615a      	str	r2, [r3, #20]
          break;
 8001972:	e003      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x130>
          break;
 800197a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_Init+0x13a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_Init+0x13e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_Init+0x14c>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x152>
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	6a39      	ldr	r1, [r7, #32]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8090 	beq.w	8001aec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a55      	ldr	r2, [pc, #340]	; (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e4:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_GPIO_Init+0x2e0>)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <HAL_GPIO_Init+0x2e4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00d      	beq.n	8001a2c <HAL_GPIO_Init+0x1e0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <HAL_GPIO_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2ec>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_GPIO_Init+0x1d8>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a24:	2303      	movs	r3, #3
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3e:	493b      	ldr	r1, [pc, #236]	; (8001b2c <HAL_GPIO_Init+0x2e0>)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4933      	ldr	r1, [pc, #204]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	492d      	ldr	r1, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4929      	ldr	r1, [pc, #164]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4923      	ldr	r1, [pc, #140]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	491f      	ldr	r1, [pc, #124]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4919      	ldr	r1, [pc, #100]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4915      	ldr	r1, [pc, #84]	; (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3301      	adds	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f47f aeaf 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	372c      	adds	r7, #44	; 0x2c
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	10320000 	.word	0x10320000
 8001b14:	10310000 	.word	0x10310000
 8001b18:	10220000 	.word	0x10220000
 8001b1c:	10210000 	.word	0x10210000
 8001b20:	10120000 	.word	0x10120000
 8001b24:	10110000 	.word	0x10110000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40010c00 	.word	0x40010c00
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	807b      	strh	r3, [r7, #2]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7e:	787b      	ldrb	r3, [r7, #1]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e26c      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8087 	beq.w	8001cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf0:	4b92      	ldr	r3, [pc, #584]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d00c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d112      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
 8001c08:	4b8c      	ldr	r3, [pc, #560]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d10b      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d06c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x12c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d168      	bne.n	8001cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e246      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x76>
 8001c38:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7f      	ldr	r2, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7a      	ldr	r2, [pc, #488]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b78      	ldr	r3, [pc, #480]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a77      	ldr	r2, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0xbc>
 8001c72:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a71      	ldr	r2, [pc, #452]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c8c:	4b6b      	ldr	r3, [pc, #428]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a67      	ldr	r2, [pc, #412]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fcb6 	bl	800161c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fcb2 	bl	800161c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1fa      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe4>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fca2 	bl	800161c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fc9e 	bl	800161c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1e6      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x10c>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d16:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1ba      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4939      	ldr	r1, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fc57 	bl	800161c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fc53 	bl	800161c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e19b      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4927      	ldr	r1, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc36 	bl	800161c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fc32 	bl	800161c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e17a      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03a      	beq.n	8001e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d019      	beq.n	8001e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fc16 	bl	800161c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc12 	bl	800161c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e15a      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f000 fa9a 	bl	800234c <RCC_Delay>
 8001e18:	e01c      	b.n	8001e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7ff fbfc 	bl	800161c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fbf8 	bl	800161c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d908      	bls.n	8001e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e140      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	42420000 	.word	0x42420000
 8001e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	4b9e      	ldr	r3, [pc, #632]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e9      	bne.n	8001e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a6 	beq.w	8001fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b97      	ldr	r3, [pc, #604]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b94      	ldr	r3, [pc, #592]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a93      	ldr	r2, [pc, #588]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b91      	ldr	r3, [pc, #580]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b8e      	ldr	r3, [pc, #568]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a8a      	ldr	r2, [pc, #552]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fbb9 	bl	800161c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7ff fbb5 	bl	800161c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0fd      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <HAL_RCC_OscConfig+0x4f8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x312>
 8001ed4:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	e02d      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a75      	ldr	r2, [pc, #468]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a72      	ldr	r2, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	e01c      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x356>
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a6c      	ldr	r2, [pc, #432]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	e00b      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a63      	ldr	r2, [pc, #396]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0304 	bic.w	r3, r3, #4
 8001f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fb69 	bl	800161c <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fb65 	bl	800161c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0ab      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	4b57      	ldr	r3, [pc, #348]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ee      	beq.n	8001f4e <HAL_RCC_OscConfig+0x37e>
 8001f70:	e014      	b.n	8001f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fb53 	bl	800161c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fb4f 	bl	800161c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e095      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8081 	beq.w	80020ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d061      	beq.n	8002088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d146      	bne.n	800205a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x4fc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fb23 	bl	800161c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff fb1f 	bl	800161c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e067      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	492d      	ldr	r1, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a19      	ldr	r1, [r3, #32]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	430b      	orrs	r3, r1
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_OscConfig+0x4fc>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff faf3 	bl	800161c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff faef 	bl	800161c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e037      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x46a>
 8002058:	e02f      	b.n	80020ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_RCC_OscConfig+0x4fc>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fadc 	bl	800161c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff fad8 	bl	800161c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e020      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x498>
 8002086:	e018      	b.n	80020ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e013      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40007000 	.word	0x40007000
 80020cc:	42420060 	.word	0x42420060

080020d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d0      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d910      	bls.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4965      	ldr	r1, [pc, #404]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	494d      	ldr	r1, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d040      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e073      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06b      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4936      	ldr	r1, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7ff fa2c 	bl	800161c <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff fa28 	bl	800161c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e053      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d210      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4922      	ldr	r1, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e032      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225e:	f000 f821 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1cc>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f98a 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	08002bf8 	.word	0x08002bf8
 800229c:	20000048 	.word	0x20000048
 80022a0:	2000004c 	.word	0x2000004c

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x30>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x36>
 80022d2:	e027      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	613b      	str	r3, [r7, #16]
      break;
 80022d8:	e027      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0c5b      	lsrs	r3, r3, #17
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002306:	fb02 f203 	mul.w	r2, r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e004      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	613b      	str	r3, [r7, #16]
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	693b      	ldr	r3, [r7, #16]
}
 800232c:	4618      	mov	r0, r3
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	007a1200 	.word	0x007a1200
 8002340:	08002c08 	.word	0x08002c08
 8002344:	08002c18 	.word	0x08002c18
 8002348:	003d0900 	.word	0x003d0900

0800234c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <RCC_Delay+0x34>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <RCC_Delay+0x38>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002368:	bf00      	nop
  }
  while (Delay --);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f9      	bne.n	8002368 <RCC_Delay+0x1c>
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000048 	.word	0x20000048
 8002384:	10624dd3 	.word	0x10624dd3

08002388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e041      	b.n	800241e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff f85a 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3304      	adds	r3, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f000 fa56 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d001      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e035      	b.n	80024ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_TIM_Base_Start_IT+0x90>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d009      	beq.n	8002476 <HAL_TIM_Base_Start_IT+0x4e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246a:	d004      	beq.n	8002476 <HAL_TIM_Base_Start_IT+0x4e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_TIM_Base_Start_IT+0x94>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d111      	bne.n	800249a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b06      	cmp	r3, #6
 8002486:	d010      	beq.n	80024aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	e007      	b.n	80024aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000400 	.word	0x40000400

080024c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d020      	beq.n	8002524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0202 	mvn.w	r2, #2
 80024f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f998 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f98b 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f99a 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d020      	beq.n	8002570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0204 	mvn.w	r2, #4
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f972 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f965 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f974 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d020      	beq.n	80025bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01b      	beq.n	80025bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0208 	mvn.w	r2, #8
 800258c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2204      	movs	r2, #4
 8002592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f94c 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f93f 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f94e 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d020      	beq.n	8002608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0210 	mvn.w	r2, #16
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2208      	movs	r2, #8
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f926 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f919 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f928 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0201 	mvn.w	r2, #1
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fe76 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa6f 	bl	8002b2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8f8 	bl	8002864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0220 	mvn.w	r2, #32
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa42 	bl	8002b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIM_ConfigClockSource+0x1c>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0b4      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x186>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f4:	d03e      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0xd4>
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	f200 8087 	bhi.w	800280c <HAL_TIM_ConfigClockSource+0x16c>
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	f000 8086 	beq.w	8002812 <HAL_TIM_ConfigClockSource+0x172>
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270a:	d87f      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b70      	cmp	r3, #112	; 0x70
 800270e:	d01a      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0xa6>
 8002710:	2b70      	cmp	r3, #112	; 0x70
 8002712:	d87b      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b60      	cmp	r3, #96	; 0x60
 8002716:	d050      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0x11a>
 8002718:	2b60      	cmp	r3, #96	; 0x60
 800271a:	d877      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b50      	cmp	r3, #80	; 0x50
 800271e:	d03c      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xfa>
 8002720:	2b50      	cmp	r3, #80	; 0x50
 8002722:	d873      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d058      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x13a>
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d86f      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b30      	cmp	r3, #48	; 0x30
 800272e:	d064      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	2b30      	cmp	r3, #48	; 0x30
 8002732:	d86b      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b20      	cmp	r3, #32
 8002736:	d060      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b20      	cmp	r3, #32
 800273a:	d867      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05c      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002740:	2b10      	cmp	r3, #16
 8002742:	d05a      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	e062      	b.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f000 f96a 	bl	8002a2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	609a      	str	r2, [r3, #8]
      break;
 8002772:	e04f      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f000 f953 	bl	8002a2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002796:	609a      	str	r2, [r3, #8]
      break;
 8002798:	e03c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f000 f8ca 	bl	8002940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2150      	movs	r1, #80	; 0x50
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f921 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027b8:	e02c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f000 f8e8 	bl	800299c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2160      	movs	r1, #96	; 0x60
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f911 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027d8:	e01c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f000 f8aa 	bl	8002940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f901 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027f8:	e00c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f000 f8f8 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 800280a:	e003      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      break;
 8002810:	e000      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
	...

08002878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <TIM_Base_SetConfig+0xc0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <TIM_Base_SetConfig+0x28>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d003      	beq.n	80028a0 <TIM_Base_SetConfig+0x28>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <TIM_Base_SetConfig+0xc4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d108      	bne.n	80028b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <TIM_Base_SetConfig+0xc0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <TIM_Base_SetConfig+0x52>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d003      	beq.n	80028ca <TIM_Base_SetConfig+0x52>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <TIM_Base_SetConfig+0xc4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d108      	bne.n	80028dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <TIM_Base_SetConfig+0xc0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d103      	bne.n	8002910 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]
  }
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400

08002940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f023 0201 	bic.w	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f023 030a 	bic.w	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	621a      	str	r2, [r3, #32]
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f023 0210 	bic.w	r2, r3, #16
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	031b      	lsls	r3, r3, #12
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	621a      	str	r2, [r3, #32]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f043 0307 	orr.w	r3, r3, #7
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b087      	sub	sp, #28
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e041      	b.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d004      	beq.n	8002adc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10c      	bne.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40000400 	.word	0x40000400

08002b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <__libc_init_array>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	2600      	movs	r6, #0
 8002b44:	4d0c      	ldr	r5, [pc, #48]	; (8002b78 <__libc_init_array+0x38>)
 8002b46:	4c0d      	ldr	r4, [pc, #52]	; (8002b7c <__libc_init_array+0x3c>)
 8002b48:	1b64      	subs	r4, r4, r5
 8002b4a:	10a4      	asrs	r4, r4, #2
 8002b4c:	42a6      	cmp	r6, r4
 8002b4e:	d109      	bne.n	8002b64 <__libc_init_array+0x24>
 8002b50:	f000 f822 	bl	8002b98 <_init>
 8002b54:	2600      	movs	r6, #0
 8002b56:	4d0a      	ldr	r5, [pc, #40]	; (8002b80 <__libc_init_array+0x40>)
 8002b58:	4c0a      	ldr	r4, [pc, #40]	; (8002b84 <__libc_init_array+0x44>)
 8002b5a:	1b64      	subs	r4, r4, r5
 8002b5c:	10a4      	asrs	r4, r4, #2
 8002b5e:	42a6      	cmp	r6, r4
 8002b60:	d105      	bne.n	8002b6e <__libc_init_array+0x2e>
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b68:	4798      	blx	r3
 8002b6a:	3601      	adds	r6, #1
 8002b6c:	e7ee      	b.n	8002b4c <__libc_init_array+0xc>
 8002b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b72:	4798      	blx	r3
 8002b74:	3601      	adds	r6, #1
 8002b76:	e7f2      	b.n	8002b5e <__libc_init_array+0x1e>
 8002b78:	08002c1c 	.word	0x08002c1c
 8002b7c:	08002c1c 	.word	0x08002c1c
 8002b80:	08002c1c 	.word	0x08002c1c
 8002b84:	08002c20 	.word	0x08002c20

08002b88 <memset>:
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4402      	add	r2, r0
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d100      	bne.n	8002b92 <memset+0xa>
 8002b90:	4770      	bx	lr
 8002b92:	f803 1b01 	strb.w	r1, [r3], #1
 8002b96:	e7f9      	b.n	8002b8c <memset+0x4>

08002b98 <_init>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	bf00      	nop
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr

08002ba4 <_fini>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr
